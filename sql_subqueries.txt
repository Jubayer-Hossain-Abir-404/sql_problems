# From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 
1. SELECT * FROM Orders WHERE salesman_id = (SELECT salesman_id FROM Salesman WHERE Salesman.name = 'Paul Adam');

# From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
4. SELECT * FROM Orders WHERE purch_amt > (SELECT AVG(purch_amt) FROM Orders WHERE ord_date = '2012-10-10');

# Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
7. SELECT * FROM customer WHERE customer_id = (SELECT salesman_id -2001 FROM salesman WHERE name = 'Mc Lyon');

# From the following tables write a SQL query to count the number of customers with grades above the average in New York City. Return grade and count. 
8. SELECT count(customer_id), grade FROM Customer where grade > (SELECT avg(grade) FROM Customer WHERE city = 'New York') group by grade;

# From the following tables, write a SQL query to find those salespeople who earned the maximum commission. Return ord_no, purch_amt, ord_date, and salesman_id.
9. SELECT ord_no, purch_amt, ord_date, salesman_id FROM Orders WHERE salesman_id = (SELECT salesman_id FROM salesman WHERE commission = (SELECT max(commission) FROM salesman));

# From the following tables write SQL query to find the customers who placed orders on 17th August 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.
10. SELECT b.*, a.cust_name FROM orders b, customer a WHERE a.customer_id=b.customer_id AND b.ord_date='2012-08-17'; 

# From the following tables write a SQL query to find salespeople who had more than one customer. Return salesman_id and name.
11. SELECT salesman_id,name FROM salesman a WHERE 1 < (SELECT COUNT(*) FROM customer WHERE salesman_id=a.salesman_id);

# From the following tables write a SQL query to find those orders, which are higher than the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 
12. SELECT * FROM orders a WHERE purch_amt > (SELECT AVG(purch_amt) FROM orders b WHERE b.customer_id = a.customer_id);

# From the following tables write a SQL query to find those orders that are equal or higher than the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
13. SELECT * FROM orders a WHERE purch_amt >= (SELECT AVG(purch_amt) FROM orders b WHERE b.customer_id = a.customer_id);

# Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date
14. SELECT ord_date, SUM(purch_amt) FROM Orders a group by a.ord_date Having SUM(purch_amt) > (SELECT MAX(purch_amt+1000.00) FROM Orders b WHERE a.ord_date = b.ord_date group by b.ord_date);

# Write a query to extract all data from the customer table if and only if one or more of the customers in the customer table are located in London. 
15. SELECT * FROM Customer where (SELECT COUNT(customer_id) FROM Customer where city='London') >= 1;

# From the following tables write a SQL query to find those orders where every order amount is less than the maximum order amount of a customer who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. .
25.  SELECT o.ord_no, o.purch_amt, o.ord_date, o.customer_id, o.salesman_id FROM Orders o WHERE o.purch_amt < (SELECT max(k.purch_amt) FROM Customer c JOIN Orders k ON k.customer_id = c.customer_id WHERE c.city = 'London');

#From the following tables write a SQL query to find those customers whose grades are higher than those living in New York City. Return customer_id, cust_name, city, grade and salesman_id.
26.  SELECT * FROM Customer WHERE grade > (SELECT max(grade) FROM Customer where city = 'New York');

27. Am working on 27..........
